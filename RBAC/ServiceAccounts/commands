# create secret for docker reg 
kubectl create secret docker-registry registry-cred \
 --docker-server=my.private-registry.com \
 --docker-username=azbykovskyi \
 --docker-password="myVeryStronPassword" \
 --docker-email=azbykovskyi@mycompany.com \
 --namespace my-namespace

 # create from dockerconfigjson 
 kubectl create secret generic registry-cred \
  --from-file=.dockerconfigjson=<path/to/.docker/config.json> \
  --type=kubernetes.io/dockerconfigjson

  
kubectl create sa azbykovskyi-sa


#Checking S/A permissions from inside kubectl pod:
kubectl exec kubectl -- kubectl get pod regular-stuff
kubectl exec kubectl -- kubectl auth can-i get pods

#Checking S/A permissions without Pod:
kubectl auth can-i list pods --as=system:serviceaccount:default:azbykovskyi-sa
kubectl auth can-i get pods --as=system:serviceaccount:default:azbykovskyi-sa

    system:serviceaccount:{NAMESPACE_NAME}:{SA_NAME}


#Checking if RBAC is Enabled / Avaialble API Version:

kubectl api-versions | grep rbac
rbac.authorization.k8s.io/v1
rbac.authorization.k8s.io/v1beta1


#creating resource
kubectl create sa {SA_NAME} \
  --namespace={NAMESPACE_NAME}

kubectl create role {ROLE_NAME} \
  --namespace={NAMESPACE_NAME} \
  --verb=get,list,watch \
  --resource=pods,pods/status

kubectl create rolebinding {ROLEBINDING_NAME} \
  --role={ROLE_NAME} \
  --serviceaccount={NAMESPACE_NAME}:{SA_NAME} \
  --namespace={NAMESPACE_NAME}

Generating resources manifests:

kubectl create sa {SA_NAME} \
  --namespace={NAMESPACE_NAME} \
  --dry-run=client \
  -o yaml

kubectl create role {ROLE_NAME} \
  --namespace={NAMESPACE_NAME} \
  --verb=get,list,watch \
  --resource=pods,pods/status \
  --dry-run=client \
  -o yaml

kubectl create rolebinding {ROLEBINDING_NAME} \
  --role={ROLE_NAME} \
  --serviceaccount={NAMESPACE_NAME}:{SA_NAME} \
  --namespace={NAMESPACE_NAME} \
  --dry-run=client \
  -o yaml


#Checking permissions:
  kubectl auth can-i list pods \
  --as=system:serviceaccount:{NAMESPACE_NAME}:{SA_NAME}
